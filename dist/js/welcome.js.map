{"version":3,"sources":["js/welcome.js"],"names":["profileUrl","token","provider","getProfile","_ref","fetchLambda","getProfileSuccess","json","el$","addClass","removeClass","src","picture","innerHTML","name","email","getProfileError","err","console","error","main","document","window","ids","parameters","getElementsById","query","getParameters","location","href","then","catch"],"mappings":"YAMA,IAAMA,YAAa,SAACC,EAAOC,GAAR,MAAA,qFACmED,EADnE,aACqFC,GAQlGC,WAAa,SAAAC,GAAA,GAAEH,GAAFG,EAAEH,MAAOC,EAATE,EAASF,QAAT,OAClBG,aAAYL,WAAWC,EAAOC,KAWzBI,kBAAoB,SAACC,EAAMC,GAC3BD,GAASC,IACRA,EAAA,aAAwBA,EAAA,UAC7BC,SAASD,EAAA,YAAoB,UAC7BE,YAAYF,EAAA,QAAgB,WAJxBA,EAAA,iBACLA,EAAA,eAAmBG,IAAAJ,EAAAK,SAAA,6BACbJ,EAAA,cACLA,EAAA,YAAaK,UAAgBN,EAA7BO,MAAAP,EAAAQ,OAAA,MAgBIC,gBAAkB,SAACC,EAAKT,GAC7BU,QAAQC,MAAMF,GACRT,EAAA,cAAyBA,EAAA,eAC9BC,SAASD,EAAA,YAAoB,UAH/BE,YAAMF,EAAA,aAAA,YAoBAY,KAAO,SAACC,EAAUC,GAEvB,KAAI,WAFL,GAAMC,IACL,UACA,cAAI,OACH,gBACA,iBASA,cAIA,gBAEAC,GACA,WACA,SAEAhB,EAAAiB,gBAAAF,EAAAF,GACAK,EAAWC,cACJH,EAAAF,EAAAM,SAAAC,KAAAnB,aACCF,EAAA,KAAA,aAAAC,SAAOD,EAAA,KAAP,QAA4BkB,EAAA,UAA5BjB,SAFRD,EAAA,cAAAkB,EAAA,UAtBDvB,WAyBEuB,GACDI,KAAA,SAAAvB,GAAA,MAAcD,mBAAdC,EAAAC,KACAuB,MAAA,SAAAd,GAAA,MAAAD,iBAAAC,EAAAT,QA7BF,MAAAS,GA+BAC,QAAAC,MAAAF,IAGAG,MAAKC,SAAUC","file":"js/welcome.js","sourcesContent":["/**\n * Builds the profile url from the provider and token values.\n * @param  {String} token    Token value.\n * @param  {String} provider Provider value.\n * @return {String}          Provider Lambda URL.\n */\nconst profileUrl = (token, provider) =>\n\t`https://kvmveb8o06.execute-api.us-east-1.amazonaws.com/dev/authentication/profile/${token}?provider=${provider}`\n/**\n * Calls the Lambda endpoint for the user profile.\n * If fetch() is undefined it returns.\n * @param  {String} options.token    Token value.\n * @param  {String} options.provider Provider value.\n * @return {Promise}                 Profile call promise.\n */\nconst getProfile = ({token, provider}) => \n\tfetchLambda(profileUrl(token, provider))\n/**\n * If the user profile is returned, update the welcome page:\n *  - hide authenticating spinner.\n *  - show welcome section.\n *  - set the user name.\n *  - set the user profile.\n * @param  {Object} json User profile json information.\n * @param  {Object} el$  Object of page elements.\n * @return {Void}\n */\nconst getProfileSuccess = (json, el$) => {\n\tif (!json || !el$) return\n\tif (!!el$['authorizing'] && !!el$['welcome']) {\n\t\taddClass(el$['authorizing'], 'hidden')\n\t\tremoveClass(el$['welcome'], 'hidden')\n\t}\n\tif (!!el$['profilePicture'])\n\t\tel$['profilePicture'].src = json.picture || 'http://placehold.it/50x50'\n\tif (!!el$['profileName'])\t\n\t\tel$['profileName'].innerHTML  = json.name || json.email || ''\n}\n/**\n * If an error is returned from getProfile() call:\n * - hide authorizing spinner.\n * - show error message.\n * @param  {Error}  err Lambda error.\n * @param  {Object} el$ Object of page elements.\n * @return {Void}\n */\nconst getProfileError = (err, el$) => {\n\tconsole.error(err)\n\tif (!!el$['errorMessage'] && !!el$['errorMessage']) {\n\t\taddClass(el$['authorizing'], 'hidden')\n\t\tremoveClass(el$['errorMessage'], 'hidden')\n\t}\n}\n/**\n * Main page function.\n * - gets the required page elements.\n * - gets the query values from the url.\n * - sets the authenticating spinner icon.\n * - calls the getProfile() method.\n *  - if the response is successful call getProfileSuccess()\n *  - if the response is no successful call getProfileError()\n *  - pass the list of page elements. \n * @param  {Object} document Page document object-\n * @param  {Object} window   Page window object.\n * @return {Void}\n */\nconst main = (document, window) => {\n\t// Log error\n\ttry {\n\t\t// Setup\n\t\tconst ids = [\n\t\t\t'welcome',\n\t\t\t'authorizing',\n\t\t\t'icon',\n\t\t\t'iconContainer',\n\t\t\t'profilePicture',\n\t\t\t'profileName',\n\t\t\t'errorMessage',\n\t\t]\n\t\tconst parameters = [\n\t\t\t'provider',\n\t\t\t'token',\n\t\t]\n\t\tconst el$ = getElementsById(ids, document)\n\t\tconst query = getParameters(parameters, window.location.href)\n\t\t// Set the authenticating spinner icon.\n\t\tremoveClass(el$['icon'], 'icon-wifi')\n\t\taddClass(el$['icon'], `icon-${query['provider']}`)\n\t\taddClass(el$['iconContainer'], query['provider'])\n\t\t// Get the user profile.\n\t\tgetProfile(query)\n\t\t\t.then(json => getProfileSuccess(json, el$))\n\t\t\t.catch(err => getProfileError(err, el$))\n\t} catch (err) {\n\t\tconsole.error(err)\n\t}\n}\n/**\n * Main page function.\n */\nmain(document, window)\n"],"sourceRoot":"/source/"}