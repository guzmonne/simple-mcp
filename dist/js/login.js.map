{"version":3,"sources":["js/login.js"],"names":["mainUrl","signupUrl","signinUrl","toggleSections","_ref","signupSection","signinSection","socialSection","toggleClass","toggleButtons","map","document","forms","form","concat","_toConsumableArray","getElementsByTagName","button","toggleForm","el$","getElementsByClassName","input","disabled","hideAlerts","_ref2","mandatoryFieldsAlert","userExistsAlert","hasClass","addClass","showAlert","alert","removeClass","getUserDataFromSignupForm","_ref3","name","email","password","age","maleRadio","femaleRadio","Promise","resolve","value","JSON","parse","options","selectedIndex","gender","checked","undefined","getUserDataFromLoginForm","_ref4","loginForm","_defineProperty","reduce","acc","Object","assign","validateData","data","notValid","keys","key","isEmpty","partial","reject","Error","signupUser","fetchJSONLambda","signinUser","loginUser","event","preventDefault","then","lambdaCallSuccess","bind","catch","loginUserError","err","console","error","createUser","createUserError","url","log","window","location","href","message","main","ids","getElementsById","toggleSectionHandler","createUserHandler","loginUserHandler","addEventListener"],"mappings":"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","file":"js/login.js","sourcesContent":["const mainUrl = 'https://kvmveb8o06.execute-api.us-east-1.amazonaws.com/dev'\nconst signupUrl = `${mainUrl}/authentication/signup`\nconst signinUrl = `${mainUrl}/authentication/login`\n/**\n * Toggles the visible section\n * @param  {Element} options.signupSection Signup section element.\n * @param  {Element} options.signinSection Login section element.\n * @param  {Element} options.socialSection Social login section element.\n * @return {Void}\n */\nconst toggleSections = ({signupSection, signinSection, socialSection}) => {\n\tif (signupSection) toggleClass(signupSection, 'hidden')\n\tif (signinSection) toggleClass(signinSection, 'hidden')\n\tif (socialSection) toggleClass(socialSection, 'hidden')\n}\n/**\n * Toggles the buttons to show a login icon.\n * @param  {Element} options.spinButton   Spin button element.\n * @param  {Element} options.createButton Create button element.\n * @return {Void}\n */\nconst toggleButtons = () =>\n\tmap(document.forms, form => \n\t\tmap([...form.getElementsByTagName('button'), ...form.getElementsByTagName('a')], \n\t\t\tbutton => toggleClass(button, 'hidden')))\n/**\n * Disables or enables the form.\n * @param  {Object} el$ Object of DOM elements.\n * @return {Void}\n */\nconst toggleForm = (el$) => {\n\tmap(document.forms, \n\t\tform => map(form.getElementsByClassName('form-control'), \n\t\t\tinput => input.disabled = !input.disabled))\n\ttoggleButtons()\n\thideAlerts(el$)\n}\n/**\n * Hide alert boxes\n * @param  {Element} options.mandatoryFieldsAlert Mandatory fields element.\n * @param  {Element} options.userExistsAlert      User exists element.\n * @return {Void}\n */\nconst hideAlerts = ({mandatoryFieldsAlert, userExistsAlert}) => {\n\tif (!!mandatoryFieldsAlert && !hasClass(mandatoryFieldsAlert, 'hidden'))\n\t\taddClass(mandatoryFieldsAlert, 'hidden')\n\tif (!!userExistsAlert && !hasClass(userExistsAlert))\n\t\taddClass(userExistsAlert, 'hidden') \n}\n/**\n * Removes the hidden class from the alert element.\n * @param  {Element} alert Alert DOM element.\n * @return {Void}\n */\nconst showAlert = (alert) => removeClass(alert, 'hidden')\n/**\n * Gets the user data from the form.\n * @param  {Element} options.name        Name input.\n * @param  {Element} options.email       Email input.\n * @param  {Element} options.password    Password input.\n * @param  {Element} options.age         Age select.\n * @param  {Element} options.maleRadio   Male radio.\n * @param  {Element} options.femaleRadio Female radio.\n * @return {Promise}                     Resolved promise with form data.\n */\nconst getUserDataFromSignupForm = ({name, email, password, age, maleRadio, femaleRadio}) => \n\tPromise.resolve({\n\t\tname: name.value,\n\t\temail: email.value,\n\t\tpassword: password.value,\n\t\tage: JSON.parse(age.options[age.selectedIndex].value),\n\t\tgender: !!maleRadio.checked ? 'male' : (!!femaleRadio.checked ? 'female' : undefined),\n\t})\n/**\n * Gets the user data from the loginForm\n * @param  {Element} options.loginForm Login form element.\n * @return {Void}\n */\nconst getUserDataFromLoginForm = ({loginForm}) => \n\tPromise.resolve(\n\t\tmap(loginForm.getElementsByClassName('form-control'), input => \n\t\t\t({[input.name]: input.value})\n\t\t).reduce((acc, input) => Object.assign(acc, input), {})\n\t)\n\t\n/**\n * Validate the user data. If one value is undefined\n * then return a Rejected promise. Else returned a \n * Resolved promise with the user data.\n * @param  {Object} data New user data.\n * @return {Promise}     Resolved or rejected promise.\n */\nconst validateData = (data) => {\n\tconst notValid = Object.keys(data)\n\t\t.map(key => isEmpty(data[key]))\n\t\t.reduce((acc, partial) => acc || partial, false)\n\treturn !!notValid ?\n\t\tPromise.reject(new Error('Todos los campos son obligatorios.')) :\n\t\tPromise.resolve(data) \n}\n/**\n * Calls the signup Lambda function.\n * @param  {Object} data New user data.\n * @return {Promise}     Lambda call promise.\n */\nconst signupUser = (data) => fetchJSONLambda(signupUrl, data)\n/**\n * Calls the login Lambda function.\n * @param  {Object} data New user data.\n * @return {Promise}     Lambda call promise.\n */\nconst signinUser = (data) => fetchJSONLambda(signinUrl, data)\n/**\n * Login handler. It:\n * - grabs the user data from the login form.\n * - validates the user data.\n * - calls the lambda function to login the user.\n * - if the call succeeds redirect to welcome page.\n * - if the call fails throw an error.\n * @param  {Object} el$   List of elements of interest.\n * @param  {Object} event Event object.\n * @return {Void}\n */\nconst loginUser = (el$, event) => {\n\tevent.preventDefault()\n\ttoggleForm(el$)\n\tgetUserDataFromLoginForm(el$)\n\t\t.then(data => validateData(data))\n\t\t.then(data => signinUser(data))\n\t\t.then(lambdaCallSuccess.bind(null, el$))\n\t\t.catch(loginUserError.bind(null, el$))\n}\n\nconst loginUserError = (el$, err) => {\n\tconsole.error(err)\n\ttoggleForm(el$)\n}\n/**\n * Submit handler. It:\n * - grabs the user data from the form.\n * - validates the user data.\n * - calls the lambda function to create the user.\n * - if the call succeeds redirect to welcome page.\n * - if the call fails throw an error.\n * @param  {Object} el$   List of elements of interest.\n * @param  {Object} event Event object.\n * @return {Void}\n */\nconst createUser = (el$, event) => {\n\tevent.preventDefault()\n\ttoggleForm(el$)\n\tgetUserDataFromSignupForm(el$)\n\t\t.then(data => validateData(data))\n\t\t.then(data => signupUser(data))\n\t\t.then(lambdaCallSuccess.bind(null, el$))\n\t\t.catch(createUserError.bind(null, el$))\n}\n/**\n * createUser() success handler.\n * @param  {Object} el$  Object with DOM elements.\n * @param  {String} url  Welcome url.\n * @return {Void}\n */\nconst lambdaCallSuccess = (el$, url) => {\n\tconsole.log(url)\n\ttoggleForm(el$)\n\twindow.location.href = url\n}\n/**\n * createUser() error handler.\n * @param  {Object} el$ Object with DOM elements.\n * @param  {Error}  err Error object.\n * @return {Void}\n */\nconst createUserError = (el$, err) => {\n\tconsole.error(err)\n\tconst {userExistsAlert, mandatoryFieldsAlert} = el$\n\ttoggleForm(el$)\n\tif (err.message === 'Todos los campos son obligatorios.')\n\t\tshowAlert(mandatoryFieldsAlert)\n\tif (err.message === 'email is in use')\n\t\tshowAlert(userExistsAlert)\n}\n/**\n * Main page function.\n * TODO\n * Fill this info\n * @param  {Object} document Page document object-\n * @param  {Object} window   Page window object.\n * @return {Void}\n */\nconst main = (document, window) => {\n\t// Log error\n\ttry {\n\t\t// Setup\n\t\tconst ids = [\n\t\t\t// Sections\n\t\t\t'signupSection',\n\t\t\t'signinSection',\n\t\t\t'socialSection',\n\t\t\t// Forms\n\t\t\t'signupForm',\n\t\t\t'loginForm',\n\t\t\t// Anchors\n\t\t\t'showSigninSection',\n\t\t\t'showSignupSection',\n\t\t\t// Form inputs\n\t\t\t'name',\n\t\t\t'email',\n\t\t\t'password',\n\t\t\t'maleRadio',\n\t\t\t'femaleRadio',\n\t\t\t'age',\n\t\t\t// Buttons\n\t\t\t'spinButton',\n\t\t\t'createButton',\n\t\t\t// Alerts\n\t\t\t'mandatoryFieldsAlert',\n\t\t\t'userExistsAlert',\n\t\t]\n\t\tconst el$ = getElementsById(ids, document)\n\t\t// Event Handlers\n\t\tconst toggleSectionHandler = toggleSections.bind(this, el$)\n\t\tconst createUserHandler = createUser.bind(this, el$)\n\t\tconst loginUserHandler = loginUser.bind(this, el$)\n\t\t// Set event listeners\n\t\taddEventListener(el$['showSigninSection'], 'click', toggleSectionHandler)\n\t\taddEventListener(el$['showSignupSection'], 'click', toggleSectionHandler)\n\t\taddEventListener(el$['signupForm'], 'onsubmit', createUserHandler)\n\t\taddEventListener(el$['loginForm'], 'onsubmit', loginUserHandler)\n\t} catch (err) {\n\t\tconsole.error(err)\n\t}\n}\n/**\n * Main page function.\n */\nmain(document, window)\n"],"sourceRoot":"/source/"}